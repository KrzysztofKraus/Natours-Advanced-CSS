/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
  /* basic reset */
  margin: 0;
  padding: 0;
  /* cleaning all html elements that could have some automatically added margin or padding */

  box-sizing: border-box;
  /* powtórzyć */
}

body {
  font-family: "Lato", sans-serif;
  /* every child elements of >body< inheritance font-family from here */
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  /* that's mean it's 1.7 times bigger then predefined line height */
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh;
  /* 95% of the viewport */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      #28b485
    ),
    url(../img/hero.jpg);
  /* there are two background images, one is a linear gradient and the another one is hero image below that */
  background-size: cover;
  background-position: top;
  /* whatever the viewport is, top of the image will be stick to the top of browser */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
  /* the reference to set the position of .logo-box top and left is the first parent element with position relative */
}

.logo {
  height: 35px;
  /* width will be set auto */
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* powyższe względem rodzica */
  transform: translate(-50%, -50%);
  /* tutaj wyśrodkowanie samego elementu */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  /* only IF animation shakes by the end. Need to be written inside of the parent elm */
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  /* span is an inline elm by default. Block elm occupy the entire width that have available and they create line breaks after and before them */
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  /* two properities required for animation to work */

  animation-timing-function: ease-out;

  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
/* for the browser performance it's the best to only ever animate two different properties. Opacity and transform. The browsers are optimized for.  */

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.btn:link,
.btn:visited {
  /* editing pseudo classes from btn */
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  /* because it's an inline element, we have to change it to inline-block if we want to apply padding or width */
  border-radius: 100px;
  transition: all 0.2s;
  /* transition property need to be in initial state */
  /* all property are able to be animated */
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

.btn::after {
  content: "";
  display: inline-block;
  /* we have to specify this two property otherwise it will not show*/
  height: 100%;
  width: 100%;
  /* this pseudo-elm is like a child element of the btn, so it will have same width and height */
  border-radius: 100px;

  position: absolute;
  top: 0;
  left: 0;
  /* we want it to be hidden behind the button so need to specify position, and set the position: relative on button! */
  z-index: -1;
  /* need to be set behind button */
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  /* if we want to make it animated need to set transition on initial state (.btn::after) */
  opacity: 0;
  /* to fading something out */
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* third option is DELAY */
  animation-fill-mode: backwards;
  /* othwerwise the initial state will be shown first, the button will be visable first, we don't want that, so with this option the 0% state from animation will be apply at first (opacity 0 and position under the visable part)
}
